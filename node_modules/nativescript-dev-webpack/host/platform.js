"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs_1 = require("fs");
const { NodeJsSyncHost } = require("@angular-devkit/core/node");
class PlatformReplacementHost {
    constructor(_platforms, _delegate = new NodeJsSyncHost()) {
        this._platforms = _platforms;
        this._delegate = _delegate;
    }
    _resolve(path) {
        const { dir, name, ext } = path_1.parse(path);
        for (const platform of this._platforms) {
            const platformFileName = `${name}.${platform}${ext}`;
            const platformPath = this.toSystemPath(path_1.join(dir, platformFileName));
            try {
                const stat = fs_1.statSync(platformPath);
                if (stat && stat.isFile()) {
                    return platformPath;
                }
            }
            catch (_e) {
                // continue checking the other platforms
            }
        }
        return path;
    }
    // Convert paths from \c\some\path to c:\some\path
    toSystemPath(path) {
        if (!process.platform.startsWith("win32")) {
            return path;
        }
        const drive = path.match(/^\\(\w)\\(.*)$/);
        return drive ?
            `${drive[1]}:\\${drive[2]}` :
            path;
    }
    get capabilities() {
        return this._delegate.capabilities;
    }
    write(path, content) {
        return this._delegate.write(this._resolve(path), content);
    }
    read(path) {
        return this._delegate.read(this._resolve(path));
    }
    delete(path) {
        return this._delegate.delete(this._resolve(path));
    }
    rename(from, to) {
        return this._delegate.rename(this._resolve(from), this._resolve(to));
    }
    list(path) {
        return this._delegate.list(this._resolve(path));
    }
    exists(path) {
        return this._delegate.exists(this._resolve(path));
    }
    isDirectory(path) {
        return this._delegate.isDirectory(this._resolve(path));
    }
    isFile(path) {
        return this._delegate.isFile(this._resolve(path));
    }
    stat(path) {
        return this._delegate.stat(this._resolve(path));
    }
    watch(path, options) {
        return this._delegate.watch(this._resolve(path), options);
    }
}
exports.PlatformReplacementHost = PlatformReplacementHost;
//# sourceMappingURL=platform.js.map